
lesson_3_lab_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001c8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002f8  08000300  00010300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002f8  080002f8  00010300  2**0
                  CONTENTS
  4 .ARM          00000000  080002f8  080002f8  00010300  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002f8  08000300  00010300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002f8  080002f8  000102f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002fc  080002fc  000102fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000300  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000300  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010300  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000098  00000000  00000000  00010329  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000087  00000000  00000000  000103c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000050  00000000  00000000  00010448  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000038  00000000  00000000  00010498  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000a9b  00000000  00000000  000104d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000109  00000000  00000000  00010f6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00002e6f  00000000  00000000  00011074  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00013ee3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000007c  00000000  00000000  00013f60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080002e0 	.word	0x080002e0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080002e0 	.word	0x080002e0

08000170 <main>:
void __init(void);

/* ----------------------------------------------------------------------------------- */

int main()
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
    /* local variable for the delay */
    volatile unsigned int delay_counter = 0;
 8000176:	2300      	movs	r3, #0
 8000178:	607b      	str	r3, [r7, #4]

    /* initialization */
    __init();
 800017a:	f000 f825 	bl	80001c8 <__init>

    /* looping */
    while(1)
    {
        /* write logic 1 in pin 13 in PORTA */
        GPIOA_ODR |= 1<<13;
 800017e:	4b11      	ldr	r3, [pc, #68]	; (80001c4 <main+0x54>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	4a10      	ldr	r2, [pc, #64]	; (80001c4 <main+0x54>)
 8000184:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000188:	6013      	str	r3, [r2, #0]

        /* arbitrary delay */
        for(delay_counter = 0; delay_counter < 5000; delay_counter++);
 800018a:	2300      	movs	r3, #0
 800018c:	607b      	str	r3, [r7, #4]
 800018e:	e002      	b.n	8000196 <main+0x26>
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	3301      	adds	r3, #1
 8000194:	607b      	str	r3, [r7, #4]
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f241 3287 	movw	r2, #4999	; 0x1387
 800019c:	4293      	cmp	r3, r2
 800019e:	d9f7      	bls.n	8000190 <main+0x20>

        /* write logic 0 in pin 13 in PORTA */
        GPIOA_ODR &= ~(1<<13);
 80001a0:	4b08      	ldr	r3, [pc, #32]	; (80001c4 <main+0x54>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a07      	ldr	r2, [pc, #28]	; (80001c4 <main+0x54>)
 80001a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80001aa:	6013      	str	r3, [r2, #0]

        /* arbitrary delay */
        for(delay_counter = 0; delay_counter < 5000; delay_counter++);
 80001ac:	2300      	movs	r3, #0
 80001ae:	607b      	str	r3, [r7, #4]
 80001b0:	e002      	b.n	80001b8 <main+0x48>
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	3301      	adds	r3, #1
 80001b6:	607b      	str	r3, [r7, #4]
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	f241 3287 	movw	r2, #4999	; 0x1387
 80001be:	4293      	cmp	r3, r2
 80001c0:	d9f7      	bls.n	80001b2 <main+0x42>
        GPIOA_ODR |= 1<<13;
 80001c2:	e7dc      	b.n	800017e <main+0xe>
 80001c4:	4001080c 	.word	0x4001080c

080001c8 <__init>:

/* ----------------------------------------------------------------------------------- */
/* ------------functions definition section------------- */

void __init(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
            written only when PLL is disabled.
            Caution: The PLL output frequency must not exceed 72 MHz.

            0110: PLL input clock x 8
    */
    RCC_CFGR |= (0b0110 << 18);
 80001cc:	4b19      	ldr	r3, [pc, #100]	; (8000234 <__init+0x6c>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a18      	ldr	r2, [pc, #96]	; (8000234 <__init+0x6c>)
 80001d2:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 80001d6:	6013      	str	r3, [r2, #0]
            00: HSI selected as system clock
            01: HSE selected as system clock
            10: PLL selected as system clock
            11: not allowed
    */
    RCC_CFGR |= (0b10 << 0);
 80001d8:	4b16      	ldr	r3, [pc, #88]	; (8000234 <__init+0x6c>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a15      	ldr	r2, [pc, #84]	; (8000234 <__init+0x6c>)
 80001de:	f043 0302 	orr.w	r3, r3, #2
 80001e2:	6013      	str	r3, [r2, #0]
            100: HCLK divided by 2
            101: HCLK divided by 4
            110: HCLK divided by 8
            111: HCLK divided by 16
    */
    RCC_CFGR |= (0b100 << 8);
 80001e4:	4b13      	ldr	r3, [pc, #76]	; (8000234 <__init+0x6c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a12      	ldr	r2, [pc, #72]	; (8000234 <__init+0x6c>)
 80001ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001ee:	6013      	str	r3, [r2, #0]
            100: HCLK divided by 2
            101: HCLK divided by 4
            110: HCLK divided by 8
            111: HCLK divided by 16
    */
    RCC_CFGR |= (0b101 << 11);
 80001f0:	4b10      	ldr	r3, [pc, #64]	; (8000234 <__init+0x6c>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a0f      	ldr	r2, [pc, #60]	; (8000234 <__init+0x6c>)
 80001f6:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80001fa:	6013      	str	r3, [r2, #0]
            Cleared by hardware when entering Stop or Standby mode. This bit can not be reset if the
            PLL clock is used as system clock or is selected to become the system clock.
            0: PLL OFF
            1: PLL ON
    */
    RCC_CR |= 1<<24;
 80001fc:	4b0e      	ldr	r3, [pc, #56]	; (8000238 <__init+0x70>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a0d      	ldr	r2, [pc, #52]	; (8000238 <__init+0x70>)
 8000202:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000206:	6013      	str	r3, [r2, #0]
        Bit 2 IOPAEN: IO port A clock enable
            Set and cleared by software.
            0: IO port A clock disabled
            1: IO port A clock enabled
    */
    RCC_APB2ENR |= 1<<2;
 8000208:	4b0c      	ldr	r3, [pc, #48]	; (800023c <__init+0x74>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a0b      	ldr	r2, [pc, #44]	; (800023c <__init+0x74>)
 800020e:	f043 0304 	orr.w	r3, r3, #4
 8000212:	6013      	str	r3, [r2, #0]

    /* Bit 21:20 in CRH Register */
    /* 10: Output mode, max speed 2 MHz. */

    /* Bit 23:20 will be 0010 (0x2) */
    GPIOA_CRH &= 0xFF0FFFFF;
 8000214:	4b0a      	ldr	r3, [pc, #40]	; (8000240 <__init+0x78>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a09      	ldr	r2, [pc, #36]	; (8000240 <__init+0x78>)
 800021a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800021e:	6013      	str	r3, [r2, #0]
    GPIOA_CRH |= 0x00200000;
 8000220:	4b07      	ldr	r3, [pc, #28]	; (8000240 <__init+0x78>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a06      	ldr	r2, [pc, #24]	; (8000240 <__init+0x78>)
 8000226:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800022a:	6013      	str	r3, [r2, #0]
}
 800022c:	bf00      	nop
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	40021004 	.word	0x40021004
 8000238:	40021000 	.word	0x40021000
 800023c:	40021018 	.word	0x40021018
 8000240:	40010804 	.word	0x40010804

08000244 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000244:	480d      	ldr	r0, [pc, #52]	; (800027c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000246:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000248:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800024c:	480c      	ldr	r0, [pc, #48]	; (8000280 <LoopForever+0x6>)
  ldr r1, =_edata
 800024e:	490d      	ldr	r1, [pc, #52]	; (8000284 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000250:	4a0d      	ldr	r2, [pc, #52]	; (8000288 <LoopForever+0xe>)
  movs r3, #0
 8000252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000254:	e002      	b.n	800025c <LoopCopyDataInit>

08000256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800025a:	3304      	adds	r3, #4

0800025c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800025c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800025e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000260:	d3f9      	bcc.n	8000256 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000262:	4a0a      	ldr	r2, [pc, #40]	; (800028c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000264:	4c0a      	ldr	r4, [pc, #40]	; (8000290 <LoopForever+0x16>)
  movs r3, #0
 8000266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000268:	e001      	b.n	800026e <LoopFillZerobss>

0800026a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800026a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800026c:	3204      	adds	r2, #4

0800026e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800026e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000270:	d3fb      	bcc.n	800026a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000272:	f000 f811 	bl	8000298 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000276:	f7ff ff7b 	bl	8000170 <main>

0800027a <LoopForever>:

LoopForever:
    b LoopForever
 800027a:	e7fe      	b.n	800027a <LoopForever>
  ldr   r0, =_estack
 800027c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000284:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000288:	08000300 	.word	0x08000300
  ldr r2, =_sbss
 800028c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000290:	2000001c 	.word	0x2000001c

08000294 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000294:	e7fe      	b.n	8000294 <ADC1_2_IRQHandler>
	...

08000298 <__libc_init_array>:
 8000298:	b570      	push	{r4, r5, r6, lr}
 800029a:	2500      	movs	r5, #0
 800029c:	4e0c      	ldr	r6, [pc, #48]	; (80002d0 <__libc_init_array+0x38>)
 800029e:	4c0d      	ldr	r4, [pc, #52]	; (80002d4 <__libc_init_array+0x3c>)
 80002a0:	1ba4      	subs	r4, r4, r6
 80002a2:	10a4      	asrs	r4, r4, #2
 80002a4:	42a5      	cmp	r5, r4
 80002a6:	d109      	bne.n	80002bc <__libc_init_array+0x24>
 80002a8:	f000 f81a 	bl	80002e0 <_init>
 80002ac:	2500      	movs	r5, #0
 80002ae:	4e0a      	ldr	r6, [pc, #40]	; (80002d8 <__libc_init_array+0x40>)
 80002b0:	4c0a      	ldr	r4, [pc, #40]	; (80002dc <__libc_init_array+0x44>)
 80002b2:	1ba4      	subs	r4, r4, r6
 80002b4:	10a4      	asrs	r4, r4, #2
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d105      	bne.n	80002c6 <__libc_init_array+0x2e>
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002c0:	4798      	blx	r3
 80002c2:	3501      	adds	r5, #1
 80002c4:	e7ee      	b.n	80002a4 <__libc_init_array+0xc>
 80002c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002ca:	4798      	blx	r3
 80002cc:	3501      	adds	r5, #1
 80002ce:	e7f2      	b.n	80002b6 <__libc_init_array+0x1e>
 80002d0:	080002f8 	.word	0x080002f8
 80002d4:	080002f8 	.word	0x080002f8
 80002d8:	080002f8 	.word	0x080002f8
 80002dc:	080002fc 	.word	0x080002fc

080002e0 <_init>:
 80002e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002e2:	bf00      	nop
 80002e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002e6:	bc08      	pop	{r3}
 80002e8:	469e      	mov	lr, r3
 80002ea:	4770      	bx	lr

080002ec <_fini>:
 80002ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ee:	bf00      	nop
 80002f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002f2:	bc08      	pop	{r3}
 80002f4:	469e      	mov	lr, r3
 80002f6:	4770      	bx	lr
