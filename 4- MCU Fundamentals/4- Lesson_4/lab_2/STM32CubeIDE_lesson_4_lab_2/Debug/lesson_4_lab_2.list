
lesson_4_lab_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000208  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000338  08000340  00010340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000338  08000338  00010340  2**0
                  CONTENTS
  4 .ARM          00000000  08000338  08000338  00010340  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000338  08000340  00010340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000338  08000338  00010338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800033c  0800033c  0001033c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000340  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000340  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010340  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000009d  00000000  00000000  00010369  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000007e  00000000  00000000  00010406  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000000b4  00000000  00000000  00010484  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000058  00000000  00000000  00010538  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000040  00000000  00000000  00010590  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000ad1  00000000  00000000  000105d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000113  00000000  00000000  000110a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00003007  00000000  00000000  000111b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000141bb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000098  00000000  00000000  00014238  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000320 	.word	0x08000320

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000320 	.word	0x08000320

08000170 <main>:
void __init(void);

/* ----------------------------------------------------------------------------------- */

int main()
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
    /* initialization */
    __init();
 8000174:	f000 f802 	bl	800017c <__init>

    /* looping */
    while(1)
 8000178:	e7fe      	b.n	8000178 <main+0x8>
	...

0800017c <__init>:

/* ----------------------------------------------------------------------------------- */
/* ------------functions definition section------------- */

void __init(void)
{
 800017c:	b480      	push	{r7}
 800017e:	af00      	add	r7, sp, #0
            Caution: The PLL output frequency must not exceed 72 MHz.

            1110: PLL input clock x 16
            1111: PLL input clock x 16
    */
    RCC_CFGR |= (0b1111 << 18);
 8000180:	4b2c      	ldr	r3, [pc, #176]	; (8000234 <__init+0xb8>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a2b      	ldr	r2, [pc, #172]	; (8000234 <__init+0xb8>)
 8000186:	f443 1370 	orr.w	r3, r3, #3932160	; 0x3c0000
 800018a:	6013      	str	r3, [r2, #0]
            00: HSI selected as system clock
            01: HSE selected as system clock
            10: PLL selected as system clock
            11: not allowed
    */
    RCC_CFGR |= (0b10 << 0);
 800018c:	4b29      	ldr	r3, [pc, #164]	; (8000234 <__init+0xb8>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a28      	ldr	r2, [pc, #160]	; (8000234 <__init+0xb8>)
 8000192:	f043 0302 	orr.w	r3, r3, #2
 8000196:	6013      	str	r3, [r2, #0]
            100: HCLK divided by 2
            101: HCLK divided by 4
            110: HCLK divided by 8
            111: HCLK divided by 16
    */
    RCC_CFGR |= (0b100 << 8);
 8000198:	4b26      	ldr	r3, [pc, #152]	; (8000234 <__init+0xb8>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a25      	ldr	r2, [pc, #148]	; (8000234 <__init+0xb8>)
 800019e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001a2:	6013      	str	r3, [r2, #0]
            100: HCLK divided by 2
            101: HCLK divided by 4
            110: HCLK divided by 8
            111: HCLK divided by 16
    */
    RCC_CFGR |= (0b000 << 11);
 80001a4:	4b23      	ldr	r3, [pc, #140]	; (8000234 <__init+0xb8>)
 80001a6:	4a23      	ldr	r2, [pc, #140]	; (8000234 <__init+0xb8>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	6013      	str	r3, [r2, #0]
            Cleared by hardware when entering Stop or Standby mode. This bit can not be reset if the
            PLL clock is used as system clock or is selected to become the system clock.
            0: PLL OFF
            1: PLL ON
    */
    RCC_CR |= (1<<24);
 80001ac:	4b22      	ldr	r3, [pc, #136]	; (8000238 <__init+0xbc>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a21      	ldr	r2, [pc, #132]	; (8000238 <__init+0xbc>)
 80001b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001b6:	6013      	str	r3, [r2, #0]
        Bit 2 IOPAEN: IO port A clock enable
            Set and cleared by software.
            0: IO port A clock disabled
            1: IO port A clock enabled
    */
    RCC_APB2ENR |= (1<<2);
 80001b8:	4b20      	ldr	r3, [pc, #128]	; (800023c <__init+0xc0>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	4a1f      	ldr	r2, [pc, #124]	; (800023c <__init+0xc0>)
 80001be:	f043 0304 	orr.w	r3, r3, #4
 80001c2:	6013      	str	r3, [r2, #0]
        Bit 0 AFIOEN: Alternate function IO clock enable
            Set and cleared by software.
            0: Alternate Function IO clock disabled
            1: Alternate Function IO clock enabled
    */
    RCC_APB2ENR |= (1<<0);
 80001c4:	4b1d      	ldr	r3, [pc, #116]	; (800023c <__init+0xc0>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a1c      	ldr	r2, [pc, #112]	; (800023c <__init+0xc0>)
 80001ca:	f043 0301 	orr.w	r3, r3, #1
 80001ce:	6013      	str	r3, [r2, #0]

    /* Bit 21:20 in CRH Register */
    /* 10: Output mode, max speed 2 MHz. */

    /* Bit 23:20 will be 0010 (0x2) */
    GPIOA_CRH &= 0xFF0FFFFF;
 80001d0:	4b1b      	ldr	r3, [pc, #108]	; (8000240 <__init+0xc4>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4a1a      	ldr	r2, [pc, #104]	; (8000240 <__init+0xc4>)
 80001d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80001da:	6013      	str	r3, [r2, #0]
    GPIOA_CRH |= 0x00200000;
 80001dc:	4b18      	ldr	r3, [pc, #96]	; (8000240 <__init+0xc4>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a17      	ldr	r2, [pc, #92]	; (8000240 <__init+0xc4>)
 80001e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001e6:	6013      	str	r3, [r2, #0]

    /* Bit 1:0 in CRL Register */
    /* 00: Input mode (reset state) */

    /* Bit 3:0 will be 0100 (0x4) */
    GPIOA_CRL &= 0xFFFFFFF0;
 80001e8:	4b16      	ldr	r3, [pc, #88]	; (8000244 <__init+0xc8>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a15      	ldr	r2, [pc, #84]	; (8000244 <__init+0xc8>)
 80001ee:	f023 030f 	bic.w	r3, r3, #15
 80001f2:	6013      	str	r3, [r2, #0]
    GPIOA_CRL |= 0x00000004;
 80001f4:	4b13      	ldr	r3, [pc, #76]	; (8000244 <__init+0xc8>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a12      	ldr	r2, [pc, #72]	; (8000244 <__init+0xc8>)
 80001fa:	f043 0304 	orr.w	r3, r3, #4
 80001fe:	6013      	str	r3, [r2, #0]
            0011: PD[x] pin
            0100: PE[x] pin
            0101: PF[x] pin
            0110: PG[x] pin
    */
    AFIO_EXTICR1 |= (0b0000 << 0);
 8000200:	4b11      	ldr	r3, [pc, #68]	; (8000248 <__init+0xcc>)
 8000202:	4a11      	ldr	r2, [pc, #68]	; (8000248 <__init+0xcc>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	6013      	str	r3, [r2, #0]
    /*
        Bits 19:0 MRx: Interrupt Mask on line x
            0: Interrupt request from Line x is masked
            1: Interrupt request from Line x is not masked
    */
    EXTI_IMR |= (1<<0);
 8000208:	4b10      	ldr	r3, [pc, #64]	; (800024c <__init+0xd0>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a0f      	ldr	r2, [pc, #60]	; (800024c <__init+0xd0>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6013      	str	r3, [r2, #0]
    /*
        Bits 19:0 TRx: Rising trigger event configuration bit of line x
            0: Rising trigger disabled (for Event and Interrupt) for input line
            1: Rising trigger enabled (for Event and Interrupt) for input line
    */
    EXTI_RTSR |= (1<<0);
 8000214:	4b0e      	ldr	r3, [pc, #56]	; (8000250 <__init+0xd4>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a0d      	ldr	r2, [pc, #52]	; (8000250 <__init+0xd4>)
 800021a:	f043 0301 	orr.w	r3, r3, #1
 800021e:	6013      	str	r3, [r2, #0]
        Acronym : EXTI0
        Description : EXTI Line0 interrupt
        Address : 0x0000_0058
    */
    /* enable NVIC IRQ 6 (EXTI0) */
    NVIC_ISER0 |= (1<<6);
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <__init+0xd8>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a0b      	ldr	r2, [pc, #44]	; (8000254 <__init+0xd8>)
 8000226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800022a:	6013      	str	r3, [r2, #0]
}
 800022c:	bf00      	nop
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	40021004 	.word	0x40021004
 8000238:	40021000 	.word	0x40021000
 800023c:	40021018 	.word	0x40021018
 8000240:	40010804 	.word	0x40010804
 8000244:	40010800 	.word	0x40010800
 8000248:	40010008 	.word	0x40010008
 800024c:	40010400 	.word	0x40010400
 8000250:	40010408 	.word	0x40010408
 8000254:	e000e100 	.word	0xe000e100

08000258 <EXTI0_IRQHandler>:

/* EXTI Line0 interrupt */
void EXTI0_IRQHandler(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
    /* EXTI 0 detected at rising edge */

    /* toggle led connected to pin 13 */
    GPIOA_ODR ^= (1<<13);
 800025c:	4b07      	ldr	r3, [pc, #28]	; (800027c <EXTI0_IRQHandler+0x24>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a06      	ldr	r2, [pc, #24]	; (800027c <EXTI0_IRQHandler+0x24>)
 8000262:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000266:	6013      	str	r3, [r2, #0]
            0: No trigger request occurred
            1: selected trigger request occurred
            This bit is set when the selected edge event arrives on the external interrupt line. This bit is
            cleared by writing a '1' into the bit.
    */
    EXTI_PR |= (1<<0);
 8000268:	4b05      	ldr	r3, [pc, #20]	; (8000280 <EXTI0_IRQHandler+0x28>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a04      	ldr	r2, [pc, #16]	; (8000280 <EXTI0_IRQHandler+0x28>)
 800026e:	f043 0301 	orr.w	r3, r3, #1
 8000272:	6013      	str	r3, [r2, #0]
}
 8000274:	bf00      	nop
 8000276:	46bd      	mov	sp, r7
 8000278:	bc80      	pop	{r7}
 800027a:	4770      	bx	lr
 800027c:	4001080c 	.word	0x4001080c
 8000280:	40010414 	.word	0x40010414

08000284 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000284:	480d      	ldr	r0, [pc, #52]	; (80002bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000286:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000288:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800028c:	480c      	ldr	r0, [pc, #48]	; (80002c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800028e:	490d      	ldr	r1, [pc, #52]	; (80002c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000290:	4a0d      	ldr	r2, [pc, #52]	; (80002c8 <LoopForever+0xe>)
  movs r3, #0
 8000292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000294:	e002      	b.n	800029c <LoopCopyDataInit>

08000296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800029a:	3304      	adds	r3, #4

0800029c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800029c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800029e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a0:	d3f9      	bcc.n	8000296 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002a2:	4a0a      	ldr	r2, [pc, #40]	; (80002cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80002a4:	4c0a      	ldr	r4, [pc, #40]	; (80002d0 <LoopForever+0x16>)
  movs r3, #0
 80002a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002a8:	e001      	b.n	80002ae <LoopFillZerobss>

080002aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002ac:	3204      	adds	r2, #4

080002ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b0:	d3fb      	bcc.n	80002aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002b2:	f000 f811 	bl	80002d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002b6:	f7ff ff5b 	bl	8000170 <main>

080002ba <LoopForever>:

LoopForever:
    b LoopForever
 80002ba:	e7fe      	b.n	80002ba <LoopForever>
  ldr   r0, =_estack
 80002bc:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002c8:	08000340 	.word	0x08000340
  ldr r2, =_sbss
 80002cc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002d0:	2000001c 	.word	0x2000001c

080002d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002d4:	e7fe      	b.n	80002d4 <ADC1_2_IRQHandler>
	...

080002d8 <__libc_init_array>:
 80002d8:	b570      	push	{r4, r5, r6, lr}
 80002da:	2500      	movs	r5, #0
 80002dc:	4e0c      	ldr	r6, [pc, #48]	; (8000310 <__libc_init_array+0x38>)
 80002de:	4c0d      	ldr	r4, [pc, #52]	; (8000314 <__libc_init_array+0x3c>)
 80002e0:	1ba4      	subs	r4, r4, r6
 80002e2:	10a4      	asrs	r4, r4, #2
 80002e4:	42a5      	cmp	r5, r4
 80002e6:	d109      	bne.n	80002fc <__libc_init_array+0x24>
 80002e8:	f000 f81a 	bl	8000320 <_init>
 80002ec:	2500      	movs	r5, #0
 80002ee:	4e0a      	ldr	r6, [pc, #40]	; (8000318 <__libc_init_array+0x40>)
 80002f0:	4c0a      	ldr	r4, [pc, #40]	; (800031c <__libc_init_array+0x44>)
 80002f2:	1ba4      	subs	r4, r4, r6
 80002f4:	10a4      	asrs	r4, r4, #2
 80002f6:	42a5      	cmp	r5, r4
 80002f8:	d105      	bne.n	8000306 <__libc_init_array+0x2e>
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000300:	4798      	blx	r3
 8000302:	3501      	adds	r5, #1
 8000304:	e7ee      	b.n	80002e4 <__libc_init_array+0xc>
 8000306:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800030a:	4798      	blx	r3
 800030c:	3501      	adds	r5, #1
 800030e:	e7f2      	b.n	80002f6 <__libc_init_array+0x1e>
 8000310:	08000338 	.word	0x08000338
 8000314:	08000338 	.word	0x08000338
 8000318:	08000338 	.word	0x08000338
 800031c:	0800033c 	.word	0x0800033c

08000320 <_init>:
 8000320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000322:	bf00      	nop
 8000324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000326:	bc08      	pop	{r3}
 8000328:	469e      	mov	lr, r3
 800032a:	4770      	bx	lr

0800032c <_fini>:
 800032c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800032e:	bf00      	nop
 8000330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000332:	bc08      	pop	{r3}
 8000334:	469e      	mov	lr, r3
 8000336:	4770      	bx	lr
